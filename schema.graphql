# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  userSignIn(login: String!, password: String!): Token!
  userSignUp(name: String!, surname: String!, login: String!, password: String!): Token!
  authVk(code: String!): Token!
  createNewsPost(description: String!, pictureURL: String): NewsPost!
  patchNewsPost(id: String!, description: String, pictureURL: String): NewsPost!
  removeNewsPost(id: String!): Boolean!
  patchCurrentUser(name: String, surname: String, password: String, universityGroup: String): User!
  patchUser(id: String!, name: String, surname: String, role: Role, universityGroup: String): User!
  createPerformancePost(title: String!, description: String, pictureURL: String, videoURL: String, state: PerformancePostState, averageRating: RatingInput, speakerId: String): PerformancePost!
  patchPerformancePost(id: String!, title: String, description: String, pictureURL: String, videoURL: String, state: PerformancePostState, averageRating: RatingInput, speakerId: String): PerformancePost!
  removePerformancePost(id: String!): Boolean!
  vote(userId: String!, performanceId: String!, rating: RatingInput!): PollVote!
  voteCurrentUser(performanceId: String!, rating: RatingInput!): PollVote!
  fileUpload(file: Upload!): String!
  removeUser(id: String!): Boolean!
}

type NewsPost {
  id: ID!
  description: String!
  pictureURL: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PaginationInputs {
  limit: Int = 10
  offset: Int!
  order: [String!] = ["createdAt", "DESC"]
}

type PerformancePost {
  id: ID!
  title: String!
  description: String
  pictureURL: String
  videoURL: String
  state: PerformancePostState!
  averageRating: Rating!
  speakerId: ID
  speaker: User
  pollVotes: [PollVote!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum PerformancePostState {
  DRAFT
  POLL
  POLL_FINISHED
  PUBLISHED
}

type PollVote {
  userId: ID!
  user: User!
  performanceId: ID!
  performance: PerformancePost!
  rating: Rating!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  findNewsPost(id: String!): NewsPost!
  getNewsPosts(params: PaginationInputs!): [NewsPost!]!
  findPerformancePost(id: String!): PerformancePost!
  getPerformancePosts(params: PaginationInputs!): [PerformancePost!]!
  getCurrentUser: User!
  findUser(login: String!): User!
  getUsers(params: PaginationInputs!): [User!]!
}

type Rating {
  interest: Float!
  format: Float!
  content: Float!
}

input RatingInput {
  interest: Float = 0
  format: Float = 0
  content: Float = 0
}

enum Role {
  USER
  STUDENT
  ADMIN
}

type Token {
  token: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  id: ID!
  name: String!
  surname: String!
  role: Role!
  login: String!
  universityGroup: String
  performances: [PerformancePost!]
  pollVotes: [PollVote!]
  createdAt: DateTime!
  updatedAt: DateTime!
}
